#!/usr/bin/python3
import base64
from datetime import datetime
import hashlib
import os
import socket

def handle_client(client_socket):
    def close_connection():
        client_out.write(response)
        client_out.flush()
        client_socket.close()

    response = None

    try:
        # Use socket file interface to read line by line
        with client_socket.makefile('r') as client_in, client_socket.makefile('w') as client_out:
            # Receive the string from the client (terminated by a newline)
            message = client_in.readline()[:-1]
            print(f"Received: \"{message}\"")


            ########## YOUR CODE HERE ############
            ### Validate the the PoW in the message
            ### Stril the PoW from the message
            ### Read the last hash from loghead.txt
            ### Create the full line for the log entry
            ### Compute its hash
            ### Append the line to the log
            ### Update loghead.txt
            ### Add error checking
            #######################################

            sha256_hash = hashlib.sha256((message).encode('utf-8')).digest()
            hash_string = sha256_hash.hex()
            print("hash(message):", hash_string)

            bits = "".join(f'{byte:08b}' for byte in sha256_hash)            
            count = 0
            for bit in bits:
                if bit == '0':
                    count += 1
                else:
                    break

            print("hash contains", count, "leading 0 bits")

            # message validation
            if ":" not in message:
                response = "invalid log message: missing a ':'"
                close_connection()
                return
            elif count < 22:
                response = "invalid PoW"
                close_connection()
                return
            

            prev_hash = "start"

            if os.path.exists("log.txt") and not os.path.exists("loghead.txt"):
                response = "error: loghead.txt missing but log.txt exists"
                close_connection()
                return
            elif not os.path.exists("log.txt"):
                open("log.txt", "w+").close()
            else:
                # get head pointer
                try:
                    with open("loghead.txt", "r") as file:
                        prev_hash = file.read().strip()
                        if not prev_hash:
                            prev_hash = "start"
                except PermissionError as e:
                    pass



            # format new log entry
            message = (message.split(":", 1))[1]  # remove PoW
            message = "".join([' ' if char.isspace() else char for char in message])
            currtime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = currtime + " - " + prev_hash + " " + message
            print("logging: \"" + message + "\"")

            # calculate new head pointer based on message
            new_hash = hashlib.sha256((message).encode('utf-8')).digest()
            new_hash = base64.b64encode(new_hash).decode('utf-8')
            print("b64 hash = \"" + new_hash + "\"")
            new_hash = new_hash[-24:]
            print("last 24 bytes of the b64-encoded hash = \"" + new_hash + "\"")

            # save new headpointer
            try:
                with open("loghead.txt", "w") as file:
                    file.write(new_hash + "\n")
            except PermissionError as e:
                print("error opening loghead.txt for writing: Permission denied")
                response = "error opening loghead.txt for writing"
                close_connection()
                return

            # Append the received string to log.txt
            try:
                with open("log.txt", "a") as log_file:
                    log_file.write(message + "\n")
            except PermissionError as e:
                print("Error opening log file: Permission denied")
                response = "error opening log.txt for writing: Permission denied"
                close_connection()
                return

            # Send a response message back to the client (terminated by a newline)
            response = "ok\n"
            close_connection()
            return

    except Exception as e:
        response = "error: " + str(e)
        print("logserver: " + str(e))
        close_connection()
        return
        

def start_server():
    # Create a socket and bind it to any available port
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 0))  # Bind to any available port
    server_socket.listen(5)

    # Get the port number and print it
    port = server_socket.getsockname()[1]
    print(f"Server listening on port {port}")

    # Continuously accept and handle clients
    while True:
        client_socket, addr = server_socket.accept()
        print(f"Accepted connection from {addr}")
        handle_client(client_socket)

if __name__ == "__main__":
    start_server()

